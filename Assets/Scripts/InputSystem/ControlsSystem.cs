//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/ControlsSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Project.Systems.ControlsSystem
{
    public partial class @ControlsSystem: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ControlsSystem()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsSystem"",
    ""maps"": [
        {
            ""name"": ""PlayerController"",
            ""id"": ""103504cb-7de7-46b1-a6f5-b1d29620d758"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""2b1fc1ef-c646-43df-abb2-bfd35a04178a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""f1c71c67-620f-4235-8d4d-677116f75587"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fight"",
                    ""type"": ""Button"",
                    ""id"": ""4ba4d2c0-557f-4eba-854e-3678e79ce376"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""68a0b80a-1ade-4c5c-9188-f3c2e484fdab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c35be8a-812f-48ad-8330-29230607cd4c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5a61132-ba15-4dcd-a5ea-a92a13574e7c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94cf02ed-1296-4431-9cb7-5e94380f7d20"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4916c2f3-4915-4959-8e65-7cfc1f14e43b"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIController"",
            ""id"": ""9dfd5e1a-5180-4c7f-88c2-96622499f045"",
            ""actions"": [
                {
                    ""name"": ""Characteristics"",
                    ""type"": ""Button"",
                    ""id"": ""d96c7571-7463-43e2-aa9b-8efaef8fd422"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0669016-b170-432d-a48a-e1f3e386c431"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Characteristics"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerController
            m_PlayerController = asset.FindActionMap("PlayerController", throwIfNotFound: true);
            m_PlayerController_Movement = m_PlayerController.FindAction("Movement", throwIfNotFound: true);
            m_PlayerController_Run = m_PlayerController.FindAction("Run", throwIfNotFound: true);
            m_PlayerController_Fight = m_PlayerController.FindAction("Fight", throwIfNotFound: true);
            m_PlayerController_Position = m_PlayerController.FindAction("Position", throwIfNotFound: true);
            // UIController
            m_UIController = asset.FindActionMap("UIController", throwIfNotFound: true);
            m_UIController_Characteristics = m_UIController.FindAction("Characteristics", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerController
        private readonly InputActionMap m_PlayerController;
        private List<IPlayerControllerActions> m_PlayerControllerActionsCallbackInterfaces = new List<IPlayerControllerActions>();
        private readonly InputAction m_PlayerController_Movement;
        private readonly InputAction m_PlayerController_Run;
        private readonly InputAction m_PlayerController_Fight;
        private readonly InputAction m_PlayerController_Position;
        public struct PlayerControllerActions
        {
            private @ControlsSystem m_Wrapper;
            public PlayerControllerActions(@ControlsSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerController_Movement;
            public InputAction @Run => m_Wrapper.m_PlayerController_Run;
            public InputAction @Fight => m_Wrapper.m_PlayerController_Fight;
            public InputAction @Position => m_Wrapper.m_PlayerController_Position;
            public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerControllerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerControllerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerControllerActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Fight.started += instance.OnFight;
                @Fight.performed += instance.OnFight;
                @Fight.canceled += instance.OnFight;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }

            private void UnregisterCallbacks(IPlayerControllerActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
                @Fight.started -= instance.OnFight;
                @Fight.performed -= instance.OnFight;
                @Fight.canceled -= instance.OnFight;
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
            }

            public void RemoveCallbacks(IPlayerControllerActions instance)
            {
                if (m_Wrapper.m_PlayerControllerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerControllerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerControllerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerControllerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);

        // UIController
        private readonly InputActionMap m_UIController;
        private List<IUIControllerActions> m_UIControllerActionsCallbackInterfaces = new List<IUIControllerActions>();
        private readonly InputAction m_UIController_Characteristics;
        public struct UIControllerActions
        {
            private @ControlsSystem m_Wrapper;
            public UIControllerActions(@ControlsSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @Characteristics => m_Wrapper.m_UIController_Characteristics;
            public InputActionMap Get() { return m_Wrapper.m_UIController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIControllerActions set) { return set.Get(); }
            public void AddCallbacks(IUIControllerActions instance)
            {
                if (instance == null || m_Wrapper.m_UIControllerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIControllerActionsCallbackInterfaces.Add(instance);
                @Characteristics.started += instance.OnCharacteristics;
                @Characteristics.performed += instance.OnCharacteristics;
                @Characteristics.canceled += instance.OnCharacteristics;
            }

            private void UnregisterCallbacks(IUIControllerActions instance)
            {
                @Characteristics.started -= instance.OnCharacteristics;
                @Characteristics.performed -= instance.OnCharacteristics;
                @Characteristics.canceled -= instance.OnCharacteristics;
            }

            public void RemoveCallbacks(IUIControllerActions instance)
            {
                if (m_Wrapper.m_UIControllerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIControllerActions instance)
            {
                foreach (var item in m_Wrapper.m_UIControllerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIControllerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIControllerActions @UIController => new UIControllerActions(this);
        public interface IPlayerControllerActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnFight(InputAction.CallbackContext context);
            void OnPosition(InputAction.CallbackContext context);
        }
        public interface IUIControllerActions
        {
            void OnCharacteristics(InputAction.CallbackContext context);
        }
    }
}
